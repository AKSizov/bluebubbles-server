import * as Koa from "koa";
import KoaSocket from "koa-socket-2";
import * as KoaBodyParser from "koa-bodyparser";
import * as KoaRouter from "koa-router";
import * as KoaJson from "koa-json";

import { IPluginConfig, IPluginConfigPropItemType, IPluginTypes, PluginConstructorParams } from "@server/plugins/types";
import { ApiPluginBase } from "../base";
import {
    getPlugins,
    authenticate
} from "./routes/http/v1";
import { AuthMiddleware } from "./middleware/http/authMiddleware";
import { Response } from "./response";
import { DEFAULT_PASSWORD } from "./constants";
import { ApiDatabase } from "./database";

const configuration: IPluginConfig = {
    name: "default",
    type: IPluginTypes.API,
    displayName: "Default Transport",
    description: "The default transport for BlueBubbles",
    version: 1,
    properties: [
        {
            name: "password",
            label: "Password",
            type: IPluginConfigPropItemType.PASSWORD,
            description: "Enter a password to use for authenticating clients.",
            default: DEFAULT_PASSWORD,
            placeholder: "Enter a password...",
            required: true
        },
        {
            name: "port",
            label: "Socket Port",
            type: IPluginConfigPropItemType.NUMBER,
            description: "Enter the local port to open up to outside access.",
            default: 1234,
            placeholder: "Enter a number between 100 and 65,535.",
            required: true
        }
    ],
    dependencies: ['messages_api.default'] // Other plugins this depends on (<type>.<name>)
};


export default class DefaultApiPlugin extends ApiPluginBase {
    
    app: Koa = null;

    io: KoaSocket = null;

    router: KoaRouter

    db: ApiDatabase;

    constructor(args: PluginConstructorParams) {
        super({ ...args, config: configuration });
    }

    async pluginWillLoad() {
        // Setup the database
        this.db = new ApiDatabase(this);
        await this.db.initialize();
    }

    async startup() {
        // Combine koa and socket.io
        this.app = new Koa();
        this.io = new KoaSocket({});
        this.io.attach(this.app);

        // Setup middlewares and routes
        this.setupMiddleware();

        const port = this.getProperty('port') as number;
        if (port && port > 0 && port < 65535) {
            this.logger.info(`Listening on port, ${port}`);
            this.app.listen(port);
        } else {
            this.logger.error(`Invalid port provided! Port provided: ${port}`);
        }
    }

    async setupMiddleware() {
        if (!this.app) return;
        this.logger.info('Setting up middleware...');

        // Body parser
        this.app.use(KoaBodyParser());

        // Inject database and self
        this.app.context.pluginDB = this.db;
        this.app.context.plugin = this;

        // Error handler
        this.app.use(async (ctx, next) => {
            try {
                await next();
            } catch (err) {
                Response.error(ctx, 500, err?.message ?? err.toString());
            }
        });

        // Setup all the routes we want to serve
        this.setupRoutesV1();

        // Attach the router to the app
        this.app.use(this.router.middleware());
        this.app.use(this.router.allowedMethods());

        // Add JSON translator
        this.app.use(KoaJson())
    }

    async setupRoutesV1() {
        this.logger.info('Setting up routes...');

        // Init the router
        this.router = new KoaRouter();
        this.router.prefix('/api/v1');

        // Protected routes
        this.router.get('/plugin', AuthMiddleware.middleware, getPlugins);

        // Unprotected routes
        this.router.get('/ping', async (ctx, _) => { Response.ok(ctx, { pong: true }) });
        this.router.post('/token', authenticate);
    }

    async shutdown() {
       this.app = null;
       if (this.io) this.io.socket.disconnect();
       this.io = null;
    }
}
